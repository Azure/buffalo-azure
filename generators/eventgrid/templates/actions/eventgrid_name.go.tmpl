package actions

import (
{{ range $i := .imports }}	{{$i}}
{{ end }}
)

// My{{$.name.Camel}}Subscriber gathers responds to all Requests sent to a particular endpoint.
type {{$.name.Camel}}Subscriber struct {
	eg.Subscriber
}

// New{{$.name.Camel}}Subscriber instantiates {{$.name.Camel}}Subscriber for use in a `buffalo.App`.
func New{{$.name.Camel}}Subscriber(parent eg.Subscriber) (created *{{$.name.Camel}}Subscriber) {
	dispatcher := eg.NewTypeDispatchSubscriber(parent)

	created = &{{$.name.Camel}}Subscriber{
		Subscriber: dispatcher,
	}

{{ range $t := .types}}
	dispatcher.Bind("{{$t.Identifier}}", created.Receive{{$t.Name.Camel}})
{{end}}
	dispatcher.Bind(eg.EventTypeWildcard, created.ReceiveDefault)

	return
}

{{ range $t := .types }}
// Receive{{$t.Name.Camel}} will respond to an `eventgrid.Event` carrying a serialized `{{$t.Name.Camel}}` as its payload.
func (s *{{$.name.Camel}}Subscriber) Receive{{$t.Name.Camel}}(c buffalo.Context, e eg.Event) error {
	var payload {{$t.PkgSpec}}.{{$t.Name.Camel}}
	if err := json.Unmarshal(e.Data, &payload); err != nil {
		return c.Error(http.StatusBadRequest, errors.New("unable to unmarshal request data"))
	}

	// Replace the code below with your logic
	return c.Error(http.StatusInternalServerError, errors.New("not implemented"))
}
{{end}}

// ReceiveDefault will respond to an `eventgrid.Event` carrying any EventType as its payload.
func (s *{{$.name.Camel}}Subscriber) ReceiveDefault(c buffalo.Context, e eg.Event) error {
	return c.Error(http.StatusInternalServerError, errors.New("not implemented"))
}
